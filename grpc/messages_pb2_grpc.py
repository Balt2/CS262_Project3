# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import messages_pb2 as messages__pb2


class MessageExchangeStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/MessageExchange/CreateAccount',
                request_serializer=messages__pb2.AccountRequest.SerializeToString,
                response_deserializer=messages__pb2.AccountResponse.FromString,
                )
        self.LogIn = channel.unary_unary(
                '/MessageExchange/LogIn',
                request_serializer=messages__pb2.AccountRequest.SerializeToString,
                response_deserializer=messages__pb2.AccountResponse.FromString,
                )
        self.ListAccounts = channel.unary_unary(
                '/MessageExchange/ListAccounts',
                request_serializer=messages__pb2.ListAccountsRequest.SerializeToString,
                response_deserializer=messages__pb2.ListAccountsResponse.FromString,
                )
        self.LogOut = channel.unary_unary(
                '/MessageExchange/LogOut',
                request_serializer=messages__pb2.AccountRequest.SerializeToString,
                response_deserializer=messages__pb2.AccountResponse.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/MessageExchange/DeleteAccount',
                request_serializer=messages__pb2.AccountRequest.SerializeToString,
                response_deserializer=messages__pb2.AccountResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/MessageExchange/SendMessage',
                request_serializer=messages__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=messages__pb2.SendMessageResponse.FromString,
                )
        self.RequestMessages = channel.unary_unary(
                '/MessageExchange/RequestMessages',
                request_serializer=messages__pb2.RequestMessagesRequest.SerializeToString,
                response_deserializer=messages__pb2.RequestMessagesResponse.FromString,
                )


class MessageExchangeServicer(object):
    """The greeting service definition.
    """

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageExchangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=messages__pb2.AccountRequest.FromString,
                    response_serializer=messages__pb2.AccountResponse.SerializeToString,
            ),
            'LogIn': grpc.unary_unary_rpc_method_handler(
                    servicer.LogIn,
                    request_deserializer=messages__pb2.AccountRequest.FromString,
                    response_serializer=messages__pb2.AccountResponse.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=messages__pb2.ListAccountsRequest.FromString,
                    response_serializer=messages__pb2.ListAccountsResponse.SerializeToString,
            ),
            'LogOut': grpc.unary_unary_rpc_method_handler(
                    servicer.LogOut,
                    request_deserializer=messages__pb2.AccountRequest.FromString,
                    response_serializer=messages__pb2.AccountResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=messages__pb2.AccountRequest.FromString,
                    response_serializer=messages__pb2.AccountResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=messages__pb2.SendMessageRequest.FromString,
                    response_serializer=messages__pb2.SendMessageResponse.SerializeToString,
            ),
            'RequestMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestMessages,
                    request_deserializer=messages__pb2.RequestMessagesRequest.FromString,
                    response_serializer=messages__pb2.RequestMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageExchange', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageExchange(object):
    """The greeting service definition.
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/CreateAccount',
            messages__pb2.AccountRequest.SerializeToString,
            messages__pb2.AccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/LogIn',
            messages__pb2.AccountRequest.SerializeToString,
            messages__pb2.AccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/ListAccounts',
            messages__pb2.ListAccountsRequest.SerializeToString,
            messages__pb2.ListAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/LogOut',
            messages__pb2.AccountRequest.SerializeToString,
            messages__pb2.AccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/DeleteAccount',
            messages__pb2.AccountRequest.SerializeToString,
            messages__pb2.AccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/SendMessage',
            messages__pb2.SendMessageRequest.SerializeToString,
            messages__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/RequestMessages',
            messages__pb2.RequestMessagesRequest.SerializeToString,
            messages__pb2.RequestMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
